// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
)

type FakeIBranchesMgr struct {
	NewBranchStub        func(string, string) error
	newBranchMutex       sync.RWMutex
	newBranchArgsForCall []struct {
		arg1 string
		arg2 string
	}
	newBranchReturns struct {
		result1 error
	}
	newBranchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIBranchesMgr) NewBranch(arg1 string, arg2 string) error {
	fake.newBranchMutex.Lock()
	ret, specificReturn := fake.newBranchReturnsOnCall[len(fake.newBranchArgsForCall)]
	fake.newBranchArgsForCall = append(fake.newBranchArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.NewBranchStub
	fakeReturns := fake.newBranchReturns
	fake.recordInvocation("NewBranch", []interface{}{arg1, arg2})
	fake.newBranchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIBranchesMgr) NewBranchCallCount() int {
	fake.newBranchMutex.RLock()
	defer fake.newBranchMutex.RUnlock()
	return len(fake.newBranchArgsForCall)
}

func (fake *FakeIBranchesMgr) NewBranchCalls(stub func(string, string) error) {
	fake.newBranchMutex.Lock()
	defer fake.newBranchMutex.Unlock()
	fake.NewBranchStub = stub
}

func (fake *FakeIBranchesMgr) NewBranchArgsForCall(i int) (string, string) {
	fake.newBranchMutex.RLock()
	defer fake.newBranchMutex.RUnlock()
	argsForCall := fake.newBranchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIBranchesMgr) NewBranchReturns(result1 error) {
	fake.newBranchMutex.Lock()
	defer fake.newBranchMutex.Unlock()
	fake.NewBranchStub = nil
	fake.newBranchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIBranchesMgr) NewBranchReturnsOnCall(i int, result1 error) {
	fake.newBranchMutex.Lock()
	defer fake.newBranchMutex.Unlock()
	fake.NewBranchStub = nil
	if fake.newBranchReturnsOnCall == nil {
		fake.newBranchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.newBranchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIBranchesMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newBranchMutex.RLock()
	defer fake.newBranchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIBranchesMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.IBranchesMgr = new(FakeIBranchesMgr)
