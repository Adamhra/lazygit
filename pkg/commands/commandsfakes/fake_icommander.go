// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/commands/types"
)

type FakeICommander struct {
	BuildGitCmdObjFromStrStub        func(string) types.ICmdObj
	buildGitCmdObjFromStrMutex       sync.RWMutex
	buildGitCmdObjFromStrArgsForCall []struct {
		arg1 string
	}
	buildGitCmdObjFromStrReturns struct {
		result1 types.ICmdObj
	}
	buildGitCmdObjFromStrReturnsOnCall map[int]struct {
		result1 types.ICmdObj
	}
	BuildShellCmdObjStub        func(string) types.ICmdObj
	buildShellCmdObjMutex       sync.RWMutex
	buildShellCmdObjArgsForCall []struct {
		arg1 string
	}
	buildShellCmdObjReturns struct {
		result1 types.ICmdObj
	}
	buildShellCmdObjReturnsOnCall map[int]struct {
		result1 types.ICmdObj
	}
	QuoteStub        func(string) string
	quoteMutex       sync.RWMutex
	quoteArgsForCall []struct {
		arg1 string
	}
	quoteReturns struct {
		result1 string
	}
	quoteReturnsOnCall map[int]struct {
		result1 string
	}
	RunStub        func(types.ICmdObj) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 types.ICmdObj
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	RunGitCmdFromStrStub        func(string) error
	runGitCmdFromStrMutex       sync.RWMutex
	runGitCmdFromStrArgsForCall []struct {
		arg1 string
	}
	runGitCmdFromStrReturns struct {
		result1 error
	}
	runGitCmdFromStrReturnsOnCall map[int]struct {
		result1 error
	}
	RunWithOutputStub        func(types.ICmdObj) (string, error)
	runWithOutputMutex       sync.RWMutex
	runWithOutputArgsForCall []struct {
		arg1 types.ICmdObj
	}
	runWithOutputReturns struct {
		result1 string
		result2 error
	}
	runWithOutputReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SkipEditorStub        func(types.ICmdObj)
	skipEditorMutex       sync.RWMutex
	skipEditorArgsForCall []struct {
		arg1 types.ICmdObj
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeICommander) BuildGitCmdObjFromStr(arg1 string) types.ICmdObj {
	fake.buildGitCmdObjFromStrMutex.Lock()
	ret, specificReturn := fake.buildGitCmdObjFromStrReturnsOnCall[len(fake.buildGitCmdObjFromStrArgsForCall)]
	fake.buildGitCmdObjFromStrArgsForCall = append(fake.buildGitCmdObjFromStrArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.BuildGitCmdObjFromStrStub
	fakeReturns := fake.buildGitCmdObjFromStrReturns
	fake.recordInvocation("BuildGitCmdObjFromStr", []interface{}{arg1})
	fake.buildGitCmdObjFromStrMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeICommander) BuildGitCmdObjFromStrCallCount() int {
	fake.buildGitCmdObjFromStrMutex.RLock()
	defer fake.buildGitCmdObjFromStrMutex.RUnlock()
	return len(fake.buildGitCmdObjFromStrArgsForCall)
}

func (fake *FakeICommander) BuildGitCmdObjFromStrCalls(stub func(string) types.ICmdObj) {
	fake.buildGitCmdObjFromStrMutex.Lock()
	defer fake.buildGitCmdObjFromStrMutex.Unlock()
	fake.BuildGitCmdObjFromStrStub = stub
}

func (fake *FakeICommander) BuildGitCmdObjFromStrArgsForCall(i int) string {
	fake.buildGitCmdObjFromStrMutex.RLock()
	defer fake.buildGitCmdObjFromStrMutex.RUnlock()
	argsForCall := fake.buildGitCmdObjFromStrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) BuildGitCmdObjFromStrReturns(result1 types.ICmdObj) {
	fake.buildGitCmdObjFromStrMutex.Lock()
	defer fake.buildGitCmdObjFromStrMutex.Unlock()
	fake.BuildGitCmdObjFromStrStub = nil
	fake.buildGitCmdObjFromStrReturns = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeICommander) BuildGitCmdObjFromStrReturnsOnCall(i int, result1 types.ICmdObj) {
	fake.buildGitCmdObjFromStrMutex.Lock()
	defer fake.buildGitCmdObjFromStrMutex.Unlock()
	fake.BuildGitCmdObjFromStrStub = nil
	if fake.buildGitCmdObjFromStrReturnsOnCall == nil {
		fake.buildGitCmdObjFromStrReturnsOnCall = make(map[int]struct {
			result1 types.ICmdObj
		})
	}
	fake.buildGitCmdObjFromStrReturnsOnCall[i] = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeICommander) BuildShellCmdObj(arg1 string) types.ICmdObj {
	fake.buildShellCmdObjMutex.Lock()
	ret, specificReturn := fake.buildShellCmdObjReturnsOnCall[len(fake.buildShellCmdObjArgsForCall)]
	fake.buildShellCmdObjArgsForCall = append(fake.buildShellCmdObjArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.BuildShellCmdObjStub
	fakeReturns := fake.buildShellCmdObjReturns
	fake.recordInvocation("BuildShellCmdObj", []interface{}{arg1})
	fake.buildShellCmdObjMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeICommander) BuildShellCmdObjCallCount() int {
	fake.buildShellCmdObjMutex.RLock()
	defer fake.buildShellCmdObjMutex.RUnlock()
	return len(fake.buildShellCmdObjArgsForCall)
}

func (fake *FakeICommander) BuildShellCmdObjCalls(stub func(string) types.ICmdObj) {
	fake.buildShellCmdObjMutex.Lock()
	defer fake.buildShellCmdObjMutex.Unlock()
	fake.BuildShellCmdObjStub = stub
}

func (fake *FakeICommander) BuildShellCmdObjArgsForCall(i int) string {
	fake.buildShellCmdObjMutex.RLock()
	defer fake.buildShellCmdObjMutex.RUnlock()
	argsForCall := fake.buildShellCmdObjArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) BuildShellCmdObjReturns(result1 types.ICmdObj) {
	fake.buildShellCmdObjMutex.Lock()
	defer fake.buildShellCmdObjMutex.Unlock()
	fake.BuildShellCmdObjStub = nil
	fake.buildShellCmdObjReturns = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeICommander) BuildShellCmdObjReturnsOnCall(i int, result1 types.ICmdObj) {
	fake.buildShellCmdObjMutex.Lock()
	defer fake.buildShellCmdObjMutex.Unlock()
	fake.BuildShellCmdObjStub = nil
	if fake.buildShellCmdObjReturnsOnCall == nil {
		fake.buildShellCmdObjReturnsOnCall = make(map[int]struct {
			result1 types.ICmdObj
		})
	}
	fake.buildShellCmdObjReturnsOnCall[i] = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeICommander) Quote(arg1 string) string {
	fake.quoteMutex.Lock()
	ret, specificReturn := fake.quoteReturnsOnCall[len(fake.quoteArgsForCall)]
	fake.quoteArgsForCall = append(fake.quoteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.QuoteStub
	fakeReturns := fake.quoteReturns
	fake.recordInvocation("Quote", []interface{}{arg1})
	fake.quoteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeICommander) QuoteCallCount() int {
	fake.quoteMutex.RLock()
	defer fake.quoteMutex.RUnlock()
	return len(fake.quoteArgsForCall)
}

func (fake *FakeICommander) QuoteCalls(stub func(string) string) {
	fake.quoteMutex.Lock()
	defer fake.quoteMutex.Unlock()
	fake.QuoteStub = stub
}

func (fake *FakeICommander) QuoteArgsForCall(i int) string {
	fake.quoteMutex.RLock()
	defer fake.quoteMutex.RUnlock()
	argsForCall := fake.quoteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) QuoteReturns(result1 string) {
	fake.quoteMutex.Lock()
	defer fake.quoteMutex.Unlock()
	fake.QuoteStub = nil
	fake.quoteReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeICommander) QuoteReturnsOnCall(i int, result1 string) {
	fake.quoteMutex.Lock()
	defer fake.quoteMutex.Unlock()
	fake.QuoteStub = nil
	if fake.quoteReturnsOnCall == nil {
		fake.quoteReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.quoteReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeICommander) Run(arg1 types.ICmdObj) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 types.ICmdObj
	}{arg1})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeICommander) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeICommander) RunCalls(stub func(types.ICmdObj) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeICommander) RunArgsForCall(i int) types.ICmdObj {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeICommander) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeICommander) RunGitCmdFromStr(arg1 string) error {
	fake.runGitCmdFromStrMutex.Lock()
	ret, specificReturn := fake.runGitCmdFromStrReturnsOnCall[len(fake.runGitCmdFromStrArgsForCall)]
	fake.runGitCmdFromStrArgsForCall = append(fake.runGitCmdFromStrArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RunGitCmdFromStrStub
	fakeReturns := fake.runGitCmdFromStrReturns
	fake.recordInvocation("RunGitCmdFromStr", []interface{}{arg1})
	fake.runGitCmdFromStrMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeICommander) RunGitCmdFromStrCallCount() int {
	fake.runGitCmdFromStrMutex.RLock()
	defer fake.runGitCmdFromStrMutex.RUnlock()
	return len(fake.runGitCmdFromStrArgsForCall)
}

func (fake *FakeICommander) RunGitCmdFromStrCalls(stub func(string) error) {
	fake.runGitCmdFromStrMutex.Lock()
	defer fake.runGitCmdFromStrMutex.Unlock()
	fake.RunGitCmdFromStrStub = stub
}

func (fake *FakeICommander) RunGitCmdFromStrArgsForCall(i int) string {
	fake.runGitCmdFromStrMutex.RLock()
	defer fake.runGitCmdFromStrMutex.RUnlock()
	argsForCall := fake.runGitCmdFromStrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) RunGitCmdFromStrReturns(result1 error) {
	fake.runGitCmdFromStrMutex.Lock()
	defer fake.runGitCmdFromStrMutex.Unlock()
	fake.RunGitCmdFromStrStub = nil
	fake.runGitCmdFromStrReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeICommander) RunGitCmdFromStrReturnsOnCall(i int, result1 error) {
	fake.runGitCmdFromStrMutex.Lock()
	defer fake.runGitCmdFromStrMutex.Unlock()
	fake.RunGitCmdFromStrStub = nil
	if fake.runGitCmdFromStrReturnsOnCall == nil {
		fake.runGitCmdFromStrReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runGitCmdFromStrReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeICommander) RunWithOutput(arg1 types.ICmdObj) (string, error) {
	fake.runWithOutputMutex.Lock()
	ret, specificReturn := fake.runWithOutputReturnsOnCall[len(fake.runWithOutputArgsForCall)]
	fake.runWithOutputArgsForCall = append(fake.runWithOutputArgsForCall, struct {
		arg1 types.ICmdObj
	}{arg1})
	stub := fake.RunWithOutputStub
	fakeReturns := fake.runWithOutputReturns
	fake.recordInvocation("RunWithOutput", []interface{}{arg1})
	fake.runWithOutputMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeICommander) RunWithOutputCallCount() int {
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	return len(fake.runWithOutputArgsForCall)
}

func (fake *FakeICommander) RunWithOutputCalls(stub func(types.ICmdObj) (string, error)) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = stub
}

func (fake *FakeICommander) RunWithOutputArgsForCall(i int) types.ICmdObj {
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	argsForCall := fake.runWithOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) RunWithOutputReturns(result1 string, result2 error) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = nil
	fake.runWithOutputReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeICommander) RunWithOutputReturnsOnCall(i int, result1 string, result2 error) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = nil
	if fake.runWithOutputReturnsOnCall == nil {
		fake.runWithOutputReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.runWithOutputReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeICommander) SkipEditor(arg1 types.ICmdObj) {
	fake.skipEditorMutex.Lock()
	fake.skipEditorArgsForCall = append(fake.skipEditorArgsForCall, struct {
		arg1 types.ICmdObj
	}{arg1})
	stub := fake.SkipEditorStub
	fake.recordInvocation("SkipEditor", []interface{}{arg1})
	fake.skipEditorMutex.Unlock()
	if stub != nil {
		fake.SkipEditorStub(arg1)
	}
}

func (fake *FakeICommander) SkipEditorCallCount() int {
	fake.skipEditorMutex.RLock()
	defer fake.skipEditorMutex.RUnlock()
	return len(fake.skipEditorArgsForCall)
}

func (fake *FakeICommander) SkipEditorCalls(stub func(types.ICmdObj)) {
	fake.skipEditorMutex.Lock()
	defer fake.skipEditorMutex.Unlock()
	fake.SkipEditorStub = stub
}

func (fake *FakeICommander) SkipEditorArgsForCall(i int) types.ICmdObj {
	fake.skipEditorMutex.RLock()
	defer fake.skipEditorMutex.RUnlock()
	argsForCall := fake.skipEditorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeICommander) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildGitCmdObjFromStrMutex.RLock()
	defer fake.buildGitCmdObjFromStrMutex.RUnlock()
	fake.buildShellCmdObjMutex.RLock()
	defer fake.buildShellCmdObjMutex.RUnlock()
	fake.quoteMutex.RLock()
	defer fake.quoteMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runGitCmdFromStrMutex.RLock()
	defer fake.runGitCmdFromStrMutex.RUnlock()
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	fake.skipEditorMutex.RLock()
	defer fake.skipEditorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeICommander) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ICommander = new(FakeICommander)
