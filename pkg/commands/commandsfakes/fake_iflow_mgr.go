// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/commands/types"
)

type FakeIFlowMgr struct {
	FinishStub        func(string, string) types.ICmdObj
	finishMutex       sync.RWMutex
	finishArgsForCall []struct {
		arg1 string
		arg2 string
	}
	finishReturns struct {
		result1 types.ICmdObj
	}
	finishReturnsOnCall map[int]struct {
		result1 types.ICmdObj
	}
	GetGitFlowRegexpConfigStub        func() (string, error)
	getGitFlowRegexpConfigMutex       sync.RWMutex
	getGitFlowRegexpConfigArgsForCall []struct {
	}
	getGitFlowRegexpConfigReturns struct {
		result1 string
		result2 error
	}
	getGitFlowRegexpConfigReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StartStub        func(string, string) types.ICmdObj
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 string
		arg2 string
	}
	startReturns struct {
		result1 types.ICmdObj
	}
	startReturnsOnCall map[int]struct {
		result1 types.ICmdObj
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIFlowMgr) Finish(arg1 string, arg2 string) types.ICmdObj {
	fake.finishMutex.Lock()
	ret, specificReturn := fake.finishReturnsOnCall[len(fake.finishArgsForCall)]
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.FinishStub
	fakeReturns := fake.finishReturns
	fake.recordInvocation("Finish", []interface{}{arg1, arg2})
	fake.finishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIFlowMgr) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *FakeIFlowMgr) FinishCalls(stub func(string, string) types.ICmdObj) {
	fake.finishMutex.Lock()
	defer fake.finishMutex.Unlock()
	fake.FinishStub = stub
}

func (fake *FakeIFlowMgr) FinishArgsForCall(i int) (string, string) {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	argsForCall := fake.finishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIFlowMgr) FinishReturns(result1 types.ICmdObj) {
	fake.finishMutex.Lock()
	defer fake.finishMutex.Unlock()
	fake.FinishStub = nil
	fake.finishReturns = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeIFlowMgr) FinishReturnsOnCall(i int, result1 types.ICmdObj) {
	fake.finishMutex.Lock()
	defer fake.finishMutex.Unlock()
	fake.FinishStub = nil
	if fake.finishReturnsOnCall == nil {
		fake.finishReturnsOnCall = make(map[int]struct {
			result1 types.ICmdObj
		})
	}
	fake.finishReturnsOnCall[i] = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeIFlowMgr) GetGitFlowRegexpConfig() (string, error) {
	fake.getGitFlowRegexpConfigMutex.Lock()
	ret, specificReturn := fake.getGitFlowRegexpConfigReturnsOnCall[len(fake.getGitFlowRegexpConfigArgsForCall)]
	fake.getGitFlowRegexpConfigArgsForCall = append(fake.getGitFlowRegexpConfigArgsForCall, struct {
	}{})
	stub := fake.GetGitFlowRegexpConfigStub
	fakeReturns := fake.getGitFlowRegexpConfigReturns
	fake.recordInvocation("GetGitFlowRegexpConfig", []interface{}{})
	fake.getGitFlowRegexpConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIFlowMgr) GetGitFlowRegexpConfigCallCount() int {
	fake.getGitFlowRegexpConfigMutex.RLock()
	defer fake.getGitFlowRegexpConfigMutex.RUnlock()
	return len(fake.getGitFlowRegexpConfigArgsForCall)
}

func (fake *FakeIFlowMgr) GetGitFlowRegexpConfigCalls(stub func() (string, error)) {
	fake.getGitFlowRegexpConfigMutex.Lock()
	defer fake.getGitFlowRegexpConfigMutex.Unlock()
	fake.GetGitFlowRegexpConfigStub = stub
}

func (fake *FakeIFlowMgr) GetGitFlowRegexpConfigReturns(result1 string, result2 error) {
	fake.getGitFlowRegexpConfigMutex.Lock()
	defer fake.getGitFlowRegexpConfigMutex.Unlock()
	fake.GetGitFlowRegexpConfigStub = nil
	fake.getGitFlowRegexpConfigReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIFlowMgr) GetGitFlowRegexpConfigReturnsOnCall(i int, result1 string, result2 error) {
	fake.getGitFlowRegexpConfigMutex.Lock()
	defer fake.getGitFlowRegexpConfigMutex.Unlock()
	fake.GetGitFlowRegexpConfigStub = nil
	if fake.getGitFlowRegexpConfigReturnsOnCall == nil {
		fake.getGitFlowRegexpConfigReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getGitFlowRegexpConfigReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIFlowMgr) Start(arg1 string, arg2 string) types.ICmdObj {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.StartStub
	fakeReturns := fake.startReturns
	fake.recordInvocation("Start", []interface{}{arg1, arg2})
	fake.startMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIFlowMgr) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeIFlowMgr) StartCalls(stub func(string, string) types.ICmdObj) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeIFlowMgr) StartArgsForCall(i int) (string, string) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	argsForCall := fake.startArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIFlowMgr) StartReturns(result1 types.ICmdObj) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeIFlowMgr) StartReturnsOnCall(i int, result1 types.ICmdObj) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 types.ICmdObj
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 types.ICmdObj
	}{result1}
}

func (fake *FakeIFlowMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	fake.getGitFlowRegexpConfigMutex.RLock()
	defer fake.getGitFlowRegexpConfigMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIFlowMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.IFlowMgr = new(FakeIFlowMgr)
