// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/config"
)

type FakeIGitConfig struct {
	ColorArgStub        func() string
	colorArgMutex       sync.RWMutex
	colorArgArgsForCall []struct {
	}
	colorArgReturns struct {
		result1 string
	}
	colorArgReturnsOnCall map[int]struct {
		result1 string
	}
	GetConfigValueStub        func(string) string
	getConfigValueMutex       sync.RWMutex
	getConfigValueArgsForCall []struct {
		arg1 string
	}
	getConfigValueReturns struct {
		result1 string
	}
	getConfigValueReturnsOnCall map[int]struct {
		result1 string
	}
	GetPagerStub        func(int) string
	getPagerMutex       sync.RWMutex
	getPagerArgsForCall []struct {
		arg1 int
	}
	getPagerReturns struct {
		result1 string
	}
	getPagerReturnsOnCall map[int]struct {
		result1 string
	}
	GetUserConfigStub        func() *config.UserConfig
	getUserConfigMutex       sync.RWMutex
	getUserConfigArgsForCall []struct {
	}
	getUserConfigReturns struct {
		result1 *config.UserConfig
	}
	getUserConfigReturnsOnCall map[int]struct {
		result1 *config.UserConfig
	}
	UsingGpgStub        func() bool
	usingGpgMutex       sync.RWMutex
	usingGpgArgsForCall []struct {
	}
	usingGpgReturns struct {
		result1 bool
	}
	usingGpgReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIGitConfig) ColorArg() string {
	fake.colorArgMutex.Lock()
	ret, specificReturn := fake.colorArgReturnsOnCall[len(fake.colorArgArgsForCall)]
	fake.colorArgArgsForCall = append(fake.colorArgArgsForCall, struct {
	}{})
	stub := fake.ColorArgStub
	fakeReturns := fake.colorArgReturns
	fake.recordInvocation("ColorArg", []interface{}{})
	fake.colorArgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfig) ColorArgCallCount() int {
	fake.colorArgMutex.RLock()
	defer fake.colorArgMutex.RUnlock()
	return len(fake.colorArgArgsForCall)
}

func (fake *FakeIGitConfig) ColorArgCalls(stub func() string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = stub
}

func (fake *FakeIGitConfig) ColorArgReturns(result1 string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = nil
	fake.colorArgReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) ColorArgReturnsOnCall(i int, result1 string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = nil
	if fake.colorArgReturnsOnCall == nil {
		fake.colorArgReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.colorArgReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) GetConfigValue(arg1 string) string {
	fake.getConfigValueMutex.Lock()
	ret, specificReturn := fake.getConfigValueReturnsOnCall[len(fake.getConfigValueArgsForCall)]
	fake.getConfigValueArgsForCall = append(fake.getConfigValueArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetConfigValueStub
	fakeReturns := fake.getConfigValueReturns
	fake.recordInvocation("GetConfigValue", []interface{}{arg1})
	fake.getConfigValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfig) GetConfigValueCallCount() int {
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	return len(fake.getConfigValueArgsForCall)
}

func (fake *FakeIGitConfig) GetConfigValueCalls(stub func(string) string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = stub
}

func (fake *FakeIGitConfig) GetConfigValueArgsForCall(i int) string {
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	argsForCall := fake.getConfigValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIGitConfig) GetConfigValueReturns(result1 string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = nil
	fake.getConfigValueReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) GetConfigValueReturnsOnCall(i int, result1 string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = nil
	if fake.getConfigValueReturnsOnCall == nil {
		fake.getConfigValueReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getConfigValueReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) GetPager(arg1 int) string {
	fake.getPagerMutex.Lock()
	ret, specificReturn := fake.getPagerReturnsOnCall[len(fake.getPagerArgsForCall)]
	fake.getPagerArgsForCall = append(fake.getPagerArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetPagerStub
	fakeReturns := fake.getPagerReturns
	fake.recordInvocation("GetPager", []interface{}{arg1})
	fake.getPagerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfig) GetPagerCallCount() int {
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	return len(fake.getPagerArgsForCall)
}

func (fake *FakeIGitConfig) GetPagerCalls(stub func(int) string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = stub
}

func (fake *FakeIGitConfig) GetPagerArgsForCall(i int) int {
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	argsForCall := fake.getPagerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIGitConfig) GetPagerReturns(result1 string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = nil
	fake.getPagerReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) GetPagerReturnsOnCall(i int, result1 string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = nil
	if fake.getPagerReturnsOnCall == nil {
		fake.getPagerReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPagerReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfig) GetUserConfig() *config.UserConfig {
	fake.getUserConfigMutex.Lock()
	ret, specificReturn := fake.getUserConfigReturnsOnCall[len(fake.getUserConfigArgsForCall)]
	fake.getUserConfigArgsForCall = append(fake.getUserConfigArgsForCall, struct {
	}{})
	stub := fake.GetUserConfigStub
	fakeReturns := fake.getUserConfigReturns
	fake.recordInvocation("GetUserConfig", []interface{}{})
	fake.getUserConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfig) GetUserConfigCallCount() int {
	fake.getUserConfigMutex.RLock()
	defer fake.getUserConfigMutex.RUnlock()
	return len(fake.getUserConfigArgsForCall)
}

func (fake *FakeIGitConfig) GetUserConfigCalls(stub func() *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = stub
}

func (fake *FakeIGitConfig) GetUserConfigReturns(result1 *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = nil
	fake.getUserConfigReturns = struct {
		result1 *config.UserConfig
	}{result1}
}

func (fake *FakeIGitConfig) GetUserConfigReturnsOnCall(i int, result1 *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = nil
	if fake.getUserConfigReturnsOnCall == nil {
		fake.getUserConfigReturnsOnCall = make(map[int]struct {
			result1 *config.UserConfig
		})
	}
	fake.getUserConfigReturnsOnCall[i] = struct {
		result1 *config.UserConfig
	}{result1}
}

func (fake *FakeIGitConfig) UsingGpg() bool {
	fake.usingGpgMutex.Lock()
	ret, specificReturn := fake.usingGpgReturnsOnCall[len(fake.usingGpgArgsForCall)]
	fake.usingGpgArgsForCall = append(fake.usingGpgArgsForCall, struct {
	}{})
	stub := fake.UsingGpgStub
	fakeReturns := fake.usingGpgReturns
	fake.recordInvocation("UsingGpg", []interface{}{})
	fake.usingGpgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfig) UsingGpgCallCount() int {
	fake.usingGpgMutex.RLock()
	defer fake.usingGpgMutex.RUnlock()
	return len(fake.usingGpgArgsForCall)
}

func (fake *FakeIGitConfig) UsingGpgCalls(stub func() bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = stub
}

func (fake *FakeIGitConfig) UsingGpgReturns(result1 bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = nil
	fake.usingGpgReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfig) UsingGpgReturnsOnCall(i int, result1 bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = nil
	if fake.usingGpgReturnsOnCall == nil {
		fake.usingGpgReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.usingGpgReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.colorArgMutex.RLock()
	defer fake.colorArgMutex.RUnlock()
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	fake.getUserConfigMutex.RLock()
	defer fake.getUserConfigMutex.RUnlock()
	fake.usingGpgMutex.RLock()
	defer fake.usingGpgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIGitConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.IGitConfig = new(FakeIGitConfig)
