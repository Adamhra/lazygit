// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/config"
)

type FakeIGitConfigMgr struct {
	ColorArgStub        func() string
	colorArgMutex       sync.RWMutex
	colorArgArgsForCall []struct {
	}
	colorArgReturns struct {
		result1 string
	}
	colorArgReturnsOnCall map[int]struct {
		result1 string
	}
	FindRemoteForBranchInConfigStub        func(string) (string, error)
	findRemoteForBranchInConfigMutex       sync.RWMutex
	findRemoteForBranchInConfigArgsForCall []struct {
		arg1 string
	}
	findRemoteForBranchInConfigReturns struct {
		result1 string
		result2 error
	}
	findRemoteForBranchInConfigReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetConfigValueStub        func(string) string
	getConfigValueMutex       sync.RWMutex
	getConfigValueArgsForCall []struct {
		arg1 string
	}
	getConfigValueReturns struct {
		result1 string
	}
	getConfigValueReturnsOnCall map[int]struct {
		result1 string
	}
	GetDebugStub        func() bool
	getDebugMutex       sync.RWMutex
	getDebugArgsForCall []struct {
	}
	getDebugReturns struct {
		result1 bool
	}
	getDebugReturnsOnCall map[int]struct {
		result1 bool
	}
	GetDotGitDirStub        func() string
	getDotGitDirMutex       sync.RWMutex
	getDotGitDirArgsForCall []struct {
	}
	getDotGitDirReturns struct {
		result1 string
	}
	getDotGitDirReturnsOnCall map[int]struct {
		result1 string
	}
	GetPagerStub        func(int) string
	getPagerMutex       sync.RWMutex
	getPagerArgsForCall []struct {
		arg1 int
	}
	getPagerReturns struct {
		result1 string
	}
	getPagerReturnsOnCall map[int]struct {
		result1 string
	}
	GetPushToCurrentStub        func() bool
	getPushToCurrentMutex       sync.RWMutex
	getPushToCurrentArgsForCall []struct {
	}
	getPushToCurrentReturns struct {
		result1 bool
	}
	getPushToCurrentReturnsOnCall map[int]struct {
		result1 bool
	}
	GetUserConfigStub        func() *config.UserConfig
	getUserConfigMutex       sync.RWMutex
	getUserConfigArgsForCall []struct {
	}
	getUserConfigReturns struct {
		result1 *config.UserConfig
	}
	getUserConfigReturnsOnCall map[int]struct {
		result1 *config.UserConfig
	}
	GetUserConfigDirStub        func() string
	getUserConfigDirMutex       sync.RWMutex
	getUserConfigDirArgsForCall []struct {
	}
	getUserConfigDirReturns struct {
		result1 string
	}
	getUserConfigDirReturnsOnCall map[int]struct {
		result1 string
	}
	UsingGpgStub        func() bool
	usingGpgMutex       sync.RWMutex
	usingGpgArgsForCall []struct {
	}
	usingGpgReturns struct {
		result1 bool
	}
	usingGpgReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIGitConfigMgr) ColorArg() string {
	fake.colorArgMutex.Lock()
	ret, specificReturn := fake.colorArgReturnsOnCall[len(fake.colorArgArgsForCall)]
	fake.colorArgArgsForCall = append(fake.colorArgArgsForCall, struct {
	}{})
	stub := fake.ColorArgStub
	fakeReturns := fake.colorArgReturns
	fake.recordInvocation("ColorArg", []interface{}{})
	fake.colorArgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) ColorArgCallCount() int {
	fake.colorArgMutex.RLock()
	defer fake.colorArgMutex.RUnlock()
	return len(fake.colorArgArgsForCall)
}

func (fake *FakeIGitConfigMgr) ColorArgCalls(stub func() string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = stub
}

func (fake *FakeIGitConfigMgr) ColorArgReturns(result1 string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = nil
	fake.colorArgReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) ColorArgReturnsOnCall(i int, result1 string) {
	fake.colorArgMutex.Lock()
	defer fake.colorArgMutex.Unlock()
	fake.ColorArgStub = nil
	if fake.colorArgReturnsOnCall == nil {
		fake.colorArgReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.colorArgReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfig(arg1 string) (string, error) {
	fake.findRemoteForBranchInConfigMutex.Lock()
	ret, specificReturn := fake.findRemoteForBranchInConfigReturnsOnCall[len(fake.findRemoteForBranchInConfigArgsForCall)]
	fake.findRemoteForBranchInConfigArgsForCall = append(fake.findRemoteForBranchInConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindRemoteForBranchInConfigStub
	fakeReturns := fake.findRemoteForBranchInConfigReturns
	fake.recordInvocation("FindRemoteForBranchInConfig", []interface{}{arg1})
	fake.findRemoteForBranchInConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfigCallCount() int {
	fake.findRemoteForBranchInConfigMutex.RLock()
	defer fake.findRemoteForBranchInConfigMutex.RUnlock()
	return len(fake.findRemoteForBranchInConfigArgsForCall)
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfigCalls(stub func(string) (string, error)) {
	fake.findRemoteForBranchInConfigMutex.Lock()
	defer fake.findRemoteForBranchInConfigMutex.Unlock()
	fake.FindRemoteForBranchInConfigStub = stub
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfigArgsForCall(i int) string {
	fake.findRemoteForBranchInConfigMutex.RLock()
	defer fake.findRemoteForBranchInConfigMutex.RUnlock()
	argsForCall := fake.findRemoteForBranchInConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfigReturns(result1 string, result2 error) {
	fake.findRemoteForBranchInConfigMutex.Lock()
	defer fake.findRemoteForBranchInConfigMutex.Unlock()
	fake.FindRemoteForBranchInConfigStub = nil
	fake.findRemoteForBranchInConfigReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitConfigMgr) FindRemoteForBranchInConfigReturnsOnCall(i int, result1 string, result2 error) {
	fake.findRemoteForBranchInConfigMutex.Lock()
	defer fake.findRemoteForBranchInConfigMutex.Unlock()
	fake.FindRemoteForBranchInConfigStub = nil
	if fake.findRemoteForBranchInConfigReturnsOnCall == nil {
		fake.findRemoteForBranchInConfigReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.findRemoteForBranchInConfigReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitConfigMgr) GetConfigValue(arg1 string) string {
	fake.getConfigValueMutex.Lock()
	ret, specificReturn := fake.getConfigValueReturnsOnCall[len(fake.getConfigValueArgsForCall)]
	fake.getConfigValueArgsForCall = append(fake.getConfigValueArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetConfigValueStub
	fakeReturns := fake.getConfigValueReturns
	fake.recordInvocation("GetConfigValue", []interface{}{arg1})
	fake.getConfigValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetConfigValueCallCount() int {
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	return len(fake.getConfigValueArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetConfigValueCalls(stub func(string) string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = stub
}

func (fake *FakeIGitConfigMgr) GetConfigValueArgsForCall(i int) string {
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	argsForCall := fake.getConfigValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIGitConfigMgr) GetConfigValueReturns(result1 string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = nil
	fake.getConfigValueReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetConfigValueReturnsOnCall(i int, result1 string) {
	fake.getConfigValueMutex.Lock()
	defer fake.getConfigValueMutex.Unlock()
	fake.GetConfigValueStub = nil
	if fake.getConfigValueReturnsOnCall == nil {
		fake.getConfigValueReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getConfigValueReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetDebug() bool {
	fake.getDebugMutex.Lock()
	ret, specificReturn := fake.getDebugReturnsOnCall[len(fake.getDebugArgsForCall)]
	fake.getDebugArgsForCall = append(fake.getDebugArgsForCall, struct {
	}{})
	stub := fake.GetDebugStub
	fakeReturns := fake.getDebugReturns
	fake.recordInvocation("GetDebug", []interface{}{})
	fake.getDebugMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetDebugCallCount() int {
	fake.getDebugMutex.RLock()
	defer fake.getDebugMutex.RUnlock()
	return len(fake.getDebugArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetDebugCalls(stub func() bool) {
	fake.getDebugMutex.Lock()
	defer fake.getDebugMutex.Unlock()
	fake.GetDebugStub = stub
}

func (fake *FakeIGitConfigMgr) GetDebugReturns(result1 bool) {
	fake.getDebugMutex.Lock()
	defer fake.getDebugMutex.Unlock()
	fake.GetDebugStub = nil
	fake.getDebugReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetDebugReturnsOnCall(i int, result1 bool) {
	fake.getDebugMutex.Lock()
	defer fake.getDebugMutex.Unlock()
	fake.GetDebugStub = nil
	if fake.getDebugReturnsOnCall == nil {
		fake.getDebugReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.getDebugReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetDotGitDir() string {
	fake.getDotGitDirMutex.Lock()
	ret, specificReturn := fake.getDotGitDirReturnsOnCall[len(fake.getDotGitDirArgsForCall)]
	fake.getDotGitDirArgsForCall = append(fake.getDotGitDirArgsForCall, struct {
	}{})
	stub := fake.GetDotGitDirStub
	fakeReturns := fake.getDotGitDirReturns
	fake.recordInvocation("GetDotGitDir", []interface{}{})
	fake.getDotGitDirMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetDotGitDirCallCount() int {
	fake.getDotGitDirMutex.RLock()
	defer fake.getDotGitDirMutex.RUnlock()
	return len(fake.getDotGitDirArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetDotGitDirCalls(stub func() string) {
	fake.getDotGitDirMutex.Lock()
	defer fake.getDotGitDirMutex.Unlock()
	fake.GetDotGitDirStub = stub
}

func (fake *FakeIGitConfigMgr) GetDotGitDirReturns(result1 string) {
	fake.getDotGitDirMutex.Lock()
	defer fake.getDotGitDirMutex.Unlock()
	fake.GetDotGitDirStub = nil
	fake.getDotGitDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetDotGitDirReturnsOnCall(i int, result1 string) {
	fake.getDotGitDirMutex.Lock()
	defer fake.getDotGitDirMutex.Unlock()
	fake.GetDotGitDirStub = nil
	if fake.getDotGitDirReturnsOnCall == nil {
		fake.getDotGitDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDotGitDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetPager(arg1 int) string {
	fake.getPagerMutex.Lock()
	ret, specificReturn := fake.getPagerReturnsOnCall[len(fake.getPagerArgsForCall)]
	fake.getPagerArgsForCall = append(fake.getPagerArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetPagerStub
	fakeReturns := fake.getPagerReturns
	fake.recordInvocation("GetPager", []interface{}{arg1})
	fake.getPagerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetPagerCallCount() int {
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	return len(fake.getPagerArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetPagerCalls(stub func(int) string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = stub
}

func (fake *FakeIGitConfigMgr) GetPagerArgsForCall(i int) int {
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	argsForCall := fake.getPagerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIGitConfigMgr) GetPagerReturns(result1 string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = nil
	fake.getPagerReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetPagerReturnsOnCall(i int, result1 string) {
	fake.getPagerMutex.Lock()
	defer fake.getPagerMutex.Unlock()
	fake.GetPagerStub = nil
	if fake.getPagerReturnsOnCall == nil {
		fake.getPagerReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPagerReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetPushToCurrent() bool {
	fake.getPushToCurrentMutex.Lock()
	ret, specificReturn := fake.getPushToCurrentReturnsOnCall[len(fake.getPushToCurrentArgsForCall)]
	fake.getPushToCurrentArgsForCall = append(fake.getPushToCurrentArgsForCall, struct {
	}{})
	stub := fake.GetPushToCurrentStub
	fakeReturns := fake.getPushToCurrentReturns
	fake.recordInvocation("GetPushToCurrent", []interface{}{})
	fake.getPushToCurrentMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetPushToCurrentCallCount() int {
	fake.getPushToCurrentMutex.RLock()
	defer fake.getPushToCurrentMutex.RUnlock()
	return len(fake.getPushToCurrentArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetPushToCurrentCalls(stub func() bool) {
	fake.getPushToCurrentMutex.Lock()
	defer fake.getPushToCurrentMutex.Unlock()
	fake.GetPushToCurrentStub = stub
}

func (fake *FakeIGitConfigMgr) GetPushToCurrentReturns(result1 bool) {
	fake.getPushToCurrentMutex.Lock()
	defer fake.getPushToCurrentMutex.Unlock()
	fake.GetPushToCurrentStub = nil
	fake.getPushToCurrentReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetPushToCurrentReturnsOnCall(i int, result1 bool) {
	fake.getPushToCurrentMutex.Lock()
	defer fake.getPushToCurrentMutex.Unlock()
	fake.GetPushToCurrentStub = nil
	if fake.getPushToCurrentReturnsOnCall == nil {
		fake.getPushToCurrentReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.getPushToCurrentReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetUserConfig() *config.UserConfig {
	fake.getUserConfigMutex.Lock()
	ret, specificReturn := fake.getUserConfigReturnsOnCall[len(fake.getUserConfigArgsForCall)]
	fake.getUserConfigArgsForCall = append(fake.getUserConfigArgsForCall, struct {
	}{})
	stub := fake.GetUserConfigStub
	fakeReturns := fake.getUserConfigReturns
	fake.recordInvocation("GetUserConfig", []interface{}{})
	fake.getUserConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetUserConfigCallCount() int {
	fake.getUserConfigMutex.RLock()
	defer fake.getUserConfigMutex.RUnlock()
	return len(fake.getUserConfigArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetUserConfigCalls(stub func() *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = stub
}

func (fake *FakeIGitConfigMgr) GetUserConfigReturns(result1 *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = nil
	fake.getUserConfigReturns = struct {
		result1 *config.UserConfig
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetUserConfigReturnsOnCall(i int, result1 *config.UserConfig) {
	fake.getUserConfigMutex.Lock()
	defer fake.getUserConfigMutex.Unlock()
	fake.GetUserConfigStub = nil
	if fake.getUserConfigReturnsOnCall == nil {
		fake.getUserConfigReturnsOnCall = make(map[int]struct {
			result1 *config.UserConfig
		})
	}
	fake.getUserConfigReturnsOnCall[i] = struct {
		result1 *config.UserConfig
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetUserConfigDir() string {
	fake.getUserConfigDirMutex.Lock()
	ret, specificReturn := fake.getUserConfigDirReturnsOnCall[len(fake.getUserConfigDirArgsForCall)]
	fake.getUserConfigDirArgsForCall = append(fake.getUserConfigDirArgsForCall, struct {
	}{})
	stub := fake.GetUserConfigDirStub
	fakeReturns := fake.getUserConfigDirReturns
	fake.recordInvocation("GetUserConfigDir", []interface{}{})
	fake.getUserConfigDirMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) GetUserConfigDirCallCount() int {
	fake.getUserConfigDirMutex.RLock()
	defer fake.getUserConfigDirMutex.RUnlock()
	return len(fake.getUserConfigDirArgsForCall)
}

func (fake *FakeIGitConfigMgr) GetUserConfigDirCalls(stub func() string) {
	fake.getUserConfigDirMutex.Lock()
	defer fake.getUserConfigDirMutex.Unlock()
	fake.GetUserConfigDirStub = stub
}

func (fake *FakeIGitConfigMgr) GetUserConfigDirReturns(result1 string) {
	fake.getUserConfigDirMutex.Lock()
	defer fake.getUserConfigDirMutex.Unlock()
	fake.GetUserConfigDirStub = nil
	fake.getUserConfigDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) GetUserConfigDirReturnsOnCall(i int, result1 string) {
	fake.getUserConfigDirMutex.Lock()
	defer fake.getUserConfigDirMutex.Unlock()
	fake.GetUserConfigDirStub = nil
	if fake.getUserConfigDirReturnsOnCall == nil {
		fake.getUserConfigDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getUserConfigDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIGitConfigMgr) UsingGpg() bool {
	fake.usingGpgMutex.Lock()
	ret, specificReturn := fake.usingGpgReturnsOnCall[len(fake.usingGpgArgsForCall)]
	fake.usingGpgArgsForCall = append(fake.usingGpgArgsForCall, struct {
	}{})
	stub := fake.UsingGpgStub
	fakeReturns := fake.usingGpgReturns
	fake.recordInvocation("UsingGpg", []interface{}{})
	fake.usingGpgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitConfigMgr) UsingGpgCallCount() int {
	fake.usingGpgMutex.RLock()
	defer fake.usingGpgMutex.RUnlock()
	return len(fake.usingGpgArgsForCall)
}

func (fake *FakeIGitConfigMgr) UsingGpgCalls(stub func() bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = stub
}

func (fake *FakeIGitConfigMgr) UsingGpgReturns(result1 bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = nil
	fake.usingGpgReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) UsingGpgReturnsOnCall(i int, result1 bool) {
	fake.usingGpgMutex.Lock()
	defer fake.usingGpgMutex.Unlock()
	fake.UsingGpgStub = nil
	if fake.usingGpgReturnsOnCall == nil {
		fake.usingGpgReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.usingGpgReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIGitConfigMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.colorArgMutex.RLock()
	defer fake.colorArgMutex.RUnlock()
	fake.findRemoteForBranchInConfigMutex.RLock()
	defer fake.findRemoteForBranchInConfigMutex.RUnlock()
	fake.getConfigValueMutex.RLock()
	defer fake.getConfigValueMutex.RUnlock()
	fake.getDebugMutex.RLock()
	defer fake.getDebugMutex.RUnlock()
	fake.getDotGitDirMutex.RLock()
	defer fake.getDotGitDirMutex.RUnlock()
	fake.getPagerMutex.RLock()
	defer fake.getPagerMutex.RUnlock()
	fake.getPushToCurrentMutex.RLock()
	defer fake.getPushToCurrentMutex.RUnlock()
	fake.getUserConfigMutex.RLock()
	defer fake.getUserConfigMutex.RUnlock()
	fake.getUserConfigDirMutex.RLock()
	defer fake.getUserConfigDirMutex.RUnlock()
	fake.usingGpgMutex.RLock()
	defer fake.usingGpgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIGitConfigMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.IGitConfigMgr = new(FakeIGitConfigMgr)
