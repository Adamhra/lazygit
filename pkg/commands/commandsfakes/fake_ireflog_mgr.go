// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/commands/models"
)

type FakeIReflogMgr struct {
	LoadReflogStub        func(*models.Commit, string) ([]*models.Commit, bool, error)
	loadReflogMutex       sync.RWMutex
	loadReflogArgsForCall []struct {
		arg1 *models.Commit
		arg2 string
	}
	loadReflogReturns struct {
		result1 []*models.Commit
		result2 bool
		result3 error
	}
	loadReflogReturnsOnCall map[int]struct {
		result1 []*models.Commit
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIReflogMgr) LoadReflog(arg1 *models.Commit, arg2 string) ([]*models.Commit, bool, error) {
	fake.loadReflogMutex.Lock()
	ret, specificReturn := fake.loadReflogReturnsOnCall[len(fake.loadReflogArgsForCall)]
	fake.loadReflogArgsForCall = append(fake.loadReflogArgsForCall, struct {
		arg1 *models.Commit
		arg2 string
	}{arg1, arg2})
	stub := fake.LoadReflogStub
	fakeReturns := fake.loadReflogReturns
	fake.recordInvocation("LoadReflog", []interface{}{arg1, arg2})
	fake.loadReflogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeIReflogMgr) LoadReflogCallCount() int {
	fake.loadReflogMutex.RLock()
	defer fake.loadReflogMutex.RUnlock()
	return len(fake.loadReflogArgsForCall)
}

func (fake *FakeIReflogMgr) LoadReflogCalls(stub func(*models.Commit, string) ([]*models.Commit, bool, error)) {
	fake.loadReflogMutex.Lock()
	defer fake.loadReflogMutex.Unlock()
	fake.LoadReflogStub = stub
}

func (fake *FakeIReflogMgr) LoadReflogArgsForCall(i int) (*models.Commit, string) {
	fake.loadReflogMutex.RLock()
	defer fake.loadReflogMutex.RUnlock()
	argsForCall := fake.loadReflogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIReflogMgr) LoadReflogReturns(result1 []*models.Commit, result2 bool, result3 error) {
	fake.loadReflogMutex.Lock()
	defer fake.loadReflogMutex.Unlock()
	fake.LoadReflogStub = nil
	fake.loadReflogReturns = struct {
		result1 []*models.Commit
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIReflogMgr) LoadReflogReturnsOnCall(i int, result1 []*models.Commit, result2 bool, result3 error) {
	fake.loadReflogMutex.Lock()
	defer fake.loadReflogMutex.Unlock()
	fake.LoadReflogStub = nil
	if fake.loadReflogReturnsOnCall == nil {
		fake.loadReflogReturnsOnCall = make(map[int]struct {
			result1 []*models.Commit
			result2 bool
			result3 error
		})
	}
	fake.loadReflogReturnsOnCall[i] = struct {
		result1 []*models.Commit
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIReflogMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadReflogMutex.RLock()
	defer fake.loadReflogMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIReflogMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.IReflogMgr = new(FakeIReflogMgr)
