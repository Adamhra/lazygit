// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/jesseduffield/lazygit/pkg/commands"
	"github.com/jesseduffield/lazygit/pkg/commands/models"
)

type FakeITagsMgr struct {
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	LightweightCreateStub        func(string, string) error
	lightweightCreateMutex       sync.RWMutex
	lightweightCreateArgsForCall []struct {
		arg1 string
		arg2 string
	}
	lightweightCreateReturns struct {
		result1 error
	}
	lightweightCreateReturnsOnCall map[int]struct {
		result1 error
	}
	LoadStub        func() ([]*models.Tag, error)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
	}
	loadReturns struct {
		result1 []*models.Tag
		result2 error
	}
	loadReturnsOnCall map[int]struct {
		result1 []*models.Tag
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeITagsMgr) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeITagsMgr) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeITagsMgr) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeITagsMgr) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeITagsMgr) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeITagsMgr) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeITagsMgr) LightweightCreate(arg1 string, arg2 string) error {
	fake.lightweightCreateMutex.Lock()
	ret, specificReturn := fake.lightweightCreateReturnsOnCall[len(fake.lightweightCreateArgsForCall)]
	fake.lightweightCreateArgsForCall = append(fake.lightweightCreateArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.LightweightCreateStub
	fakeReturns := fake.lightweightCreateReturns
	fake.recordInvocation("LightweightCreate", []interface{}{arg1, arg2})
	fake.lightweightCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeITagsMgr) LightweightCreateCallCount() int {
	fake.lightweightCreateMutex.RLock()
	defer fake.lightweightCreateMutex.RUnlock()
	return len(fake.lightweightCreateArgsForCall)
}

func (fake *FakeITagsMgr) LightweightCreateCalls(stub func(string, string) error) {
	fake.lightweightCreateMutex.Lock()
	defer fake.lightweightCreateMutex.Unlock()
	fake.LightweightCreateStub = stub
}

func (fake *FakeITagsMgr) LightweightCreateArgsForCall(i int) (string, string) {
	fake.lightweightCreateMutex.RLock()
	defer fake.lightweightCreateMutex.RUnlock()
	argsForCall := fake.lightweightCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeITagsMgr) LightweightCreateReturns(result1 error) {
	fake.lightweightCreateMutex.Lock()
	defer fake.lightweightCreateMutex.Unlock()
	fake.LightweightCreateStub = nil
	fake.lightweightCreateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeITagsMgr) LightweightCreateReturnsOnCall(i int, result1 error) {
	fake.lightweightCreateMutex.Lock()
	defer fake.lightweightCreateMutex.Unlock()
	fake.LightweightCreateStub = nil
	if fake.lightweightCreateReturnsOnCall == nil {
		fake.lightweightCreateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.lightweightCreateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeITagsMgr) Load() ([]*models.Tag, error) {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
	}{})
	stub := fake.LoadStub
	fakeReturns := fake.loadReturns
	fake.recordInvocation("Load", []interface{}{})
	fake.loadMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeITagsMgr) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeITagsMgr) LoadCalls(stub func() ([]*models.Tag, error)) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *FakeITagsMgr) LoadReturns(result1 []*models.Tag, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 []*models.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeITagsMgr) LoadReturnsOnCall(i int, result1 []*models.Tag, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 []*models.Tag
			result2 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 []*models.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeITagsMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.lightweightCreateMutex.RLock()
	defer fake.lightweightCreateMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeITagsMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ITagsMgr = new(FakeITagsMgr)
